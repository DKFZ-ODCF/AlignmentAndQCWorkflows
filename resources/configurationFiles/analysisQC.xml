<configuration name='qcAnalysis' description='Quality control for NGS data.'
               configurationType='analysis' class='de.dkfz.roddy.core.Analysis'
               workflowClass='de.dkfz.b080.co.qcworkflow.QCPipeline'
               runtimeServiceClass='de.dkfz.b080.co.common.COProjectsRuntimeService'
               imports="commonCOWorkflowsSettings"
               canCreateTestdata='true'
               listOfUsedTools="alignment,accelerated:alignment,alignAndPair,accelerated:alignAndPair,alignAndPairSlim,accelerated:alignAndPairSlim,samtoolsIndex,samtoolsFlagstat,sampesort,sampesortSlim,qcSummary,mergeAndRemoveDuplicates,mergeAndRemoveDuplicatesSlimPicard,mergeAndRemoveDuplicatesSlimBioBambam,insertSizes,genomeCoverage,fastqc,coveragePlot,coveragePlotSingle,collectBamMetrics,chromosomeDiff"
               usedToolFolders="qcPipeline,qcPipelineTools,devel,tools"
               cleanupScript="cleanupScript">
    <configurationvalues>

        <!--ENVIRONMENT SETUP -->
        <cvalue name="HTSLIB_VERSION" value="0.2.5" type="string"/>
        <cvalue name="PERL_VERSION" value="5.20.2" type="string"/>
        <cvalue name="PYTHON_VERSION" value="2.7.9" type="string"/>
        <cvalue name="R_VERSION" value="3.4.0" type="string"/>
        <cvalue name='BEDTOOLS_VERSION' value='2.16.2' type='string'/>
        <cvalue name="VCFTOOLS_VERSION" value="0.1.10" type="string"/>
        <cvalue name="SAMTOOLS_VERSION" value="0.1.19" type="string"/>
        <cvalue name="SAMBAMBA_VERSION" value="0.5.9" type="string"
                description="Only used for 'view' and 'sort'."/>
        <cvalue name="SAMBAMBA_FLAGSTATS_VERSION" value="0.4.6" type="string"
                description="Version 0.4.6 of sambamba produces the old samtools 0.1.19 compatible counts."/>
        <cvalue name="SAMBAMBA_MARKDUP_VERSION" value="0.5.9" type="string"
                description="Only used for duplication marking."/>
        <cvalue name="PICARD_VERSION" value="1.125" type="string"/>
        <cvalue name="LIBMAUS_VERSION" value="0.0.131" type="string"/>
        <cvalue name="BIOBAMBAM_VERSION" value="0.0.148" type="string"/>
        <cvalue name="JAVA_VERSION" value="1.8.0_131" type="string"/>
        <cvalue name="BWA_VERSION" value="0.7.8" type="string"
                description="Use e.g. 0.7.8-r2.05 for a specific revision of bb-bwa."/>
        <cvalue name="FASTQC_VERSION" value="0.11.3" type="string"/>

        <cvalue name="workflowEnvironmentScript" value="workflowEnvironment_tbiPbs" type="string"/>

        <cvalue name='CHR_PREFIX' value="" description="Set this to e.g. chrMmu if you have xenograft data."/>
        <cvalue name='CHR_SUFFIX' value="" description="Usually empty."/>
        <cvalue name='CHROMOSOME_INDICES' value='( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y MT )' type='bashArray'
                description="Bash array (enclosed in parens) of chromosome identifiers as found in the BAM header. Mind 'chr' prefixes! See also CHROM_SIZES_FILE. Needed for grouping data by short and long chromosome names, where long names match '$CHR_PREFIX$chr$CHR_SUFFIX'."/>

        <!-- Directories -->
        <cvalue name='sampleDirectory' value='${inputBaseDirectory}/${pid}/${sample}/${SEQUENCER_PROTOCOL}' type='path'/>
        <cvalue name='sequenceDirectory' value='${sampleDirectory}/${run}/sequence' type='path'/>

        <cvalue name='analysisMethodNameOnInput' value='whole_genome_analysis' type='string'/>
        <cvalue name='analysisMethodNameOnOutput' value='genome' type='string'/>

        <cvalue name='runFastQC' value='true' type='boolean'/>
        <cvalue name='runCoveragePlots' value='true' type='boolean'/>

        <cvalue name="INSERT_SIZE_LIMIT" value="1000" type="integer" description="Make the value a lot larger for mate pair data."/>
        <cvalue name="BWA_MEM_THREADS" value="8" type="integer" description="Threads for bwa mem."/>

    </configurationvalues>

    <processingTools>
        <tool name="workflowEnvironment_tbiLsf" value="tbi-lsf-cluster.sh" basepath="qcPipeline/environments"/>
        <tool name="workflowEnvironment_tbiPbs" value="tbi-pbs-cluster.sh" basepath="qcPipeline/environments"/>
        <tool name="bashLib" value="bashLib.sh" basepath="qcPipeline"/>
        <tool name="groupedGenomeCoverages" value="groupedGenomeCoverages.pl" basepath="qcPipeline"/>
        <tool name="cleanupScript" value="cleanupScript.sh" basepath="qcPipeline" >
            <resourcesets>
                <rset size="l" memory="0.1" cores="1" nodes="1" walltime="1"/>
            </resourcesets>
        </tool>
        <tool name='fastqc' value='checkFastQC.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="t" nodes="1" walltime="1"/>
                <rset size="l" nodes="1" walltime="10"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter='RAW_SEQ'/>
            <output type="file" typeof="de.dkfz.b080.co.files.FastqcFile" scriptparameter="FILENAME_FASTQC" check="true"/>
        </tool>
        <tool name='adaptorTrimming' value='trimmomatic/trimmomatic-0.30.jar' basepath="qcPipelineTools"/>
        <tool name='alignment' value='bwaAlignSequence.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="l" memory="4" cores="8" nodes="1" walltime="10"/>
                <rset size="xl" memory="8" cores="8" nodes="1" walltime="10"/>
            </resourcesets>
        </tool>
        <tool name='accelerated:alignment' value='bwaAlignSequence.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="m" memory="24" cores="12" nodes="1" walltime="1" queue="convey"/>
                <rset size="l" memory="24" cores="12" nodes="1" walltime="2" queue="convey"/>
                <rset size="xl" memory="36" cores="12" nodes="1" walltime="5" queue="convey"/>
            </resourcesets>
        </tool>
        <tool name='sampesort' value='bwaSampeSort.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="25" cores="6" nodes="1" queue="devel"/>
                <!-- Production -->
                <rset size="s" memory="38" cores="6" nodes="1" walltime="2"/>
                <rset size="m" memory="42" cores="6" nodes="1" walltime="4"/>
                <rset size="l" memory="52" cores="6" nodes="1" walltime="10"/>
                <rset size="xl" memory="75" cores="6" nodes="1" walltime="12"/>
            </resourcesets>
        </tool>
        <tool name='sampesortSlim' value='bwaSampeSortSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="s" memory="25" cores="6" nodes="1" walltime="1"/>
                <rset size="m" memory="30" cores="6" nodes="1" walltime="2"/>
                <rset size="l" memory="35" cores="8" nodes="1" walltime="7"/>
                <rset size="xl" memory="35" cores="6" nodes="1" walltime="12"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.AlignedSequenceFile" scriptparameter="FILENAME_SEQ_1" />
            <input type="file" typeof="de.dkfz.b080.co.files.AlignedSequenceFile" scriptparameter="FILENAME_SEQ_2" />
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_1" />
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_2" />
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <input type="string" setby="callingCode" scriptparameter="RUN"/>
            <input type="string" setby="callingCode" scriptparameter="LANE"/>
            <input type="string" setby="callingCode" scriptparameter="LB"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_1_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_2_INDEX"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_SORTED_BAM">
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS" />
                <output type="file" variable="extendedFlagstatsFile" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS" />
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS" />
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX" />
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT" />
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS" />
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX" />
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT" />
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE" />
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE" />
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY" />
            </output>
        </tool>
        <tool name='alignAndPair' value='bwaMemSort.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="s" memory="12" cores="8" nodes="1" walltime="2"/>
                <rset size="m" memory="17" cores="8" nodes="1" walltime="6"/>
                <rset size="l" memory="18" cores="8" nodes="1" walltime="35"/>
                <rset size="xl" memory="20" cores="8" nodes="1" walltime="50"/>
            </resourcesets>
        </tool>
        <tool name='accelerated:alignAndPair' value='bwaMemSort.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="t" memory="20" cores="12" nodes="1" walltime="1" queue="convey"/>
                <rset size="s" memory="20" cores="12" nodes="1" walltime="1" queue="convey"/>
                <rset size="m" memory="20" cores="12" nodes="1" walltime="5" queue="convey"/>
                <rset size="l" memory="26" cores="12" nodes="1" walltime="15" queue="convey"/>
                <rset size="xl" memory="26" cores="12" nodes="1" walltime="30" queue="convey"/>
            </resourcesets>
        </tool>
        <tool name='alignAndPairSlim' value='bwaMemSortSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="12" cores="8" nodes="1" queue="devel"/>
                <!-- ChIP-Seq -->
                <rset size="s" memory="12" cores="8" nodes="1" walltime="2"/>
                <!-- exome part lane -->
                <rset size="m" memory="17" cores="8" nodes="1" walltime="6"/>
                <!-- HiSeq full lane. 24 h would be OK but as soon as there are I/O problems on the node, not even 36 h are sufficient - biobambam sort might also be slower than samtools, it seems to use fewer sorting threads	 -->
                <rset size="l" memory="20" cores="8" nodes="1" walltime="60"/>
                <!-- X10 lane -->
                <rset size="xl" memory="20" cores="8" nodes="1" walltime="120"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_1"/>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_2"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <input type="string" setby="callingCode" scriptparameter="RUN"/>
            <input type="string" setby="callingCode" scriptparameter="LANE"/>
            <input type="string" setby="callingCode" scriptparameter="LB"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_1_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_2_INDEX"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_SORTED_BAM">
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON" />
                <!--<output type="file" variable="dipStatisticsFile" fnpatternselectiontag="dipStatistics" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_DIP_STATISTICS" />-->
                <!--<output type="file" variable="dipStatisticsPlotFile" fnpatternselectiontag="dipStatistics" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_DIP_STATISTICS_PLOT" />-->
            </output>
        </tool>
        <tool name='accelerated:alignAndPairSlim' value='bwaMemSortSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="126" cores="12" nodes="1" queue="convey_fast"/>
                <!-- Production -->
                <rset size="s" memory="126" cores="12" nodes="1" walltime="1" queue="convey"/>
                <rset size="m" memory="126" cores="12" nodes="1" walltime="5" queue="convey"/>
                <rset size="l" memory="126" cores="12" nodes="1" walltime="15" queue="convey"/>
                <rset size="xl" memory="126" cores="12" nodes="1" walltime="30" queue="convey"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_1"/>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_2"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <input type="string" setby="callingCode" scriptparameter="RUN"/>
            <input type="string" setby="callingCode" scriptparameter="LANE"/>
            <input type="string" setby="callingCode" scriptparameter="LB"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_1_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_2_INDEX"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_SORTED_BAM">
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON" />
                <!-- <output type="file" variable="dipStatisticsFile" fnpatternselectiontag="dipStatistics" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_DIP_STATISTICS" /> -->
                <!-- <output type="file" variable="dipStatisticsPlotFile" fnpatternselectiontag="dipStatistics" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_DIP_STATISTICS_PLOT" /> -->
            </output>
        </tool>

        <tool name='commonAlignmentSettingsScript' value='bwaCommonAlignmentSettings.sh' basepath='qcPipeline'/>

        <tool name='bwaErrorCheckingScript' value='bwaErrorChecking.sh' basepath='qcPipeline'/>
        <tool name='insilicoGenotyperScript' value='insilicoGenotyper.py' basepath='qcPipeline'/>
        <tool name='pairedEndReadAberrationsScript' value='pairedEndReadAberrations.py' basepath='qcPipeline'/>
        <tool name='coveragePlotScript' value='coveragePlot.R' basepath='qcPipeline'/>
        <tool name='insertSizesBucketSortScript' value='isizes_bucketsort.pl' basepath='qcPipeline'/>
        <tool name='insertSizePlotScript' value='insertsizePlot.R' basepath='qcPipeline'/>
        <!--<tool name='writeQcSummary' value='writeQCSummary.py' basepath='qcPipeline'/>-->
        <tool name='writeQcSummary' value='writeQCsummary.pl' basepath='qcPipeline'/>
        <tool name='qcJson' value='qcJson.pl' basepath='qcPipeline'/>
        <tool name='dipStatistics' value='hartigansDip.R' basepath='qcPipeline'/>

        <tool name='samtoolsIndex' value='samtoolsIndexBamfile.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="l" memory="1" cores="1" nodes="1" walltime="5"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter='FILENAME'/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="IDX_FILE"/>
        </tool>
        <tool name='collectBamMetrics' value='picardCollectMetrics.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="l" memory="3" cores="1" nodes="1" walltime="5"/>
            </resourcesets>
        </tool>
        <tool name='samtoolsFlagstat' value='samtoolsFlagstatBamfile.sh' basepath='qcPipeline'>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter='FILENAME' />
                <!--<constraint method="hasIndex" methodonfail="index"/>-->
            <!--</input>-->
            <output type="file" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter='FILENAME_FLAGSTAT'/>
        </tool>
        <tool name='sequencerDetection' value='PhredOrIllumina.pl' basepath='qcPipeline'/>
	<tool name='convertIlluminaScores' value='Illumina2PhredScore.pl' basepath='qcPipeline'/>
        <tool name='insertSizes' value='insertSizeDistribution.sh' basepath='qcPipeline'>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME"/>
            <output type="filegroup" typeof="de.dkfz.b080.co.files.InsertSizesFileGroup">
                <output type="file" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAMED"/>
                <output type="file" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAMEP"/>
                <output type="file" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAMEV"/>
            </output>
        </tool>
        <tool name='chromosomeDiff' value='differentiateChromosomes.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="s" memory="1" cores="1" nodes="1" walltime="1"/>
                <rset size="l" memory="25" cores="1" nodes="1" walltime="5"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME"/>
            <output type="filegroup" typeof="de.dkfz.b080.co.files.ChromosomeDiffFileGroup">
                <output type="file" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAMED"/>
                <output type="file" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAMEP"/>
                <output type="file" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAMEV"/>
            </output>
        </tool>
        <tool name='genomeCoverage' value='genomeCoverage.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="t" memory="0.05" cores="4" nodes="1" walltime="1"/>
                <rset size="l" memory="0.05" cores="4" nodes="1" walltime="6"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME"/>
            <input type="file" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="FILENAME_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="COVERAGE_TYPE"/>
            <output type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_COVERAGE"/>
        </tool>
        <tool name='plotDiffchrom' value='chrom_diff.r' basepath='qcPipeline'/>
        <tool name='coverageQc' value='coverageQc.py' basepath='qcPipeline'/>
        <tool name='filterReadBins' value='filter_readbins.pl' basepath='qcPipeline'/>
        <tool name='genomeCoveragePyScript' value='genomeCoverage.py' basepath='qcPipeline'/>
        <tool name='coverageQcDImpl' value='coverageQcD/coverageQc' basepath="qcPipelineTools"/>
        <tool name='genomeCoverageDImpl' value='genomeCoverage/genomeCoverage' basepath="qcPipelineTools"/>

        <tool name='readBinsCoverage' value='genomeCoverageReadBins.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="l" memory="0.05" cores="4" nodes="1" walltime="6"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME"/>
            <output type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="OUTFILENAME"/>
        </tool>
        <tool name='coveragePlot' value='genomeCoveragePlots.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="0.05" cores="4" nodes="1" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="0.05" cores="4" nodes="1" walltime="6"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_CONTROL"/>
            <input type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_TUMOR"/>
            <output type="file" typeof="de.dkfz.b080.co.files.GenomeCoveragePlotFile" scriptparameter="PLOTFILE"/>
        </tool>
        <tool name='coveragePlotSingle' value='genomeCoveragePlots.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="0.05" cores="4" nodes="1" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="0.05" cores="4" nodes="1" walltime="6"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_CONTROL"/>
            <output type="file" fnpatternselectiontag="singlePlot" typeof="de.dkfz.b080.co.files.GenomeCoveragePlotFile" scriptparameter="PLOTFILE"/>
        </tool>
        <tool name='qcSummary' value='writeQCSummary.sh' basepath='qcPipeline'/>
        <tool name='mergeAndRemoveDuplicates' value='mergeAndRemoveDuplicates.sh' basepath='qcPipeline'>
            <resourcesets>
                <rset size="xs" memory="73" cores="8" nodes="1" walltime="1"/>
                <rset size="s" memory="73" cores="8" nodes="1" walltime="5"/>
                <rset size="m" memory="73" cores="8" nodes="1" walltime="20"/>
                <rset size="l" memory="73" cores="8" nodes="1" walltime="40"/>
                <rset size="xl" memory="73" cores="8" nodes="1" walltime="80"/>
            </resourcesets>
        </tool>
        <tool name='mergeAndRemoveDuplicatesSlimPicard' value='mergeAndMarkOrRemoveDuplicatesSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="50" cores="8" nodes="1" queue="devel"/>
                <!-- Production -->
                <rset size="xs" memory="50" cores="8" nodes="1" walltime="1"/>
                <rset size="s" memory="55" cores="8" nodes="1" walltime="2"/>
                <rset size="m" memory="62" cores="8" nodes="1" walltime="5"/>
                <rset size="l" memory="60" cores="8" nodes="1" walltime="15"/>
                <rset size="xl" memory="100" cores="8" nodes="1" walltime="240"/>
            </resourcesets>
            <!-- The first input object will be obsolete at some point, currently, filegroups cannot be the first object. -->
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="IGNORED_FILENAME"/>
            <input type="filegroup" typeof="de.dkfz.b080.co.files.BamFileGroup" scriptparameter="INPUT_FILES" passas="array"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME">
                <output type="file" variable="indexFile" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="FILENAME_INDEX"/>
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="metricsFile" typeof="de.dkfz.b080.co.files.BamMetricsFile" scriptparameter="FILENAME_METRICS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="groupedGenomeCoverageTextFile" fnpatternselectiontag="groupedGenomeCoverage" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_GROUPED_GENOME_COVERAGE" />
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON" />
                <!--<output type="file" variable="dipStatisticsFile" fnpatternselectiontag="dipStatistics" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_DIP_STATISTICS" />-->
                <!--<output type="file" variable="dipStatisticsPlotFile" fnpatternselectiontag="dipStatistics" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_DIP_STATISTICS_PLOT" />-->
            </output>
        </tool>
        <tool name='mergeAndRemoveDuplicatesSlimBioBambam' value='mergeAndMarkOrRemoveDuplicatesSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="5" cores="3" nodes="1" queue="devel"/>
                <!-- Production -->
                <rset size="xs" memory="5" cores="3" nodes="1" walltime="1"/>
                <rset size="s" memory="5" cores="3" nodes="1" walltime="2"/>
                <rset size="m" memory="5" cores="3" nodes="1" walltime="12"/>
                <rset size="l" memory="15" cores="3" nodes="1" walltime="120"/>
                <rset size="xl" memory="15" cores="3" nodes="1" walltime="240"/>
            </resourcesets>
            <!-- The first input object will be obsolete at some point, currently, filegroups cannot be the first object. -->
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="IGNORED_FILENAME"/>
            <input type="filegroup" typeof="de.dkfz.b080.co.files.BamFileGroup" scriptparameter="INPUT_FILES" passas="array"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME">
                <output type="file" variable="indexFile" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="FILENAME_INDEX"/>
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="metricsFile" typeof="de.dkfz.b080.co.files.BamMetricsFile" scriptparameter="FILENAME_METRICS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="groupedGenomeCoverageTextFile" fnpatternselectiontag="groupedGenomeCoverage" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_GROUPED_GENOME_COVERAGE" />
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON" />
                <!--<output type="file" variable="dipStatisticsFile" fnpatternselectiontag="dipStatistics" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_DIP_STATISTICS" />-->
                <!--<output type="file" variable="dipStatisticsPlotFile" fnpatternselectiontag="dipStatistics" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_DIP_STATISTICS_PLOT" />-->
            </output>
        </tool>
        <tool name="checkAlreadyMergedLanes" value="alreadyMergedLanes.pl" basepath="qcPipeline"/>
        <tool name='combinedBamAnalysis' value='flags_isizes_PEaberrations.pl' basepath='qcPipeline'/>

    </processingTools>
    <filenames package='de.dkfz.b080.co.files' filestagesbase='de.dkfz.b080.co.files.COFileStage'>
        <!-- Filenames are always stored in the pid's output folder -->
        <!-- Different variables can be used:
            - ${sourcefile}, use the name and the path of the file from which the new name is derived
            - ${sourcefileAtomic}, use the atomic name of which the file is derived
            - ${sourcefileAtomicPrefix,delimiter=".."}, use the atomic name's prefix (without file-ending like .txt/.paired.bam...
                                                        of which the file is derived, set the delimiter option to define the delimiter default is "_"
                                                        the delimiter has to be placed inside "" as this is used to find the delimiter!
            - ${sourcepath}, use the path in which the source file is stored
            - ${outputbasepath}, use the output path of the pid
            - ${[nameofdir]OutputDirectory}

            NOTICE: If you use options for a variable your are NOT allowed to use ","! It is used to recognize options.

            - ${pid}
            - ${sample}
            - ${run}
            - ${lane}
            - ${laneindex}
            - You can put in configuration values to do this use:
              ${cvalue,name=[name of the value],default=".."} where default is optional.
            - ${fileStageID} use the id String of the file's stage to build up the name.
            -->
        <!-- A filename can be derived from another file, use derivedFrom='shortClassName/longClassName'
             A filename can also be specified for a level, use fileStage='PID/SAMPLE/RUN/LANE/INDEXEDLANE', refer to BaseFile.FileStage
             A filename can be specified for all levels, the name is then build up with the ${fileStageID} value
             A filename can be created using the file's called method's name
             A filename can be created using the used tool's name
             -->

        <filename class='AlignedSequenceFile' fileStage="INDEXEDLANE" pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${fileStageID}_sequence.sai'/>
        <filename class='FastqcFile' fileStage='INDEXEDLANE' pattern="${outputAnalysisBaseDirectory}/${fastx_qcOutputDirectory}/${fileStageID}_sequence_fastqc.zip"/>
        <filename class='BamMetricsAlignmentSummaryFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${metricsOutputDirectory}/${cvalue,name="COLLECT_METRICS_PREFIX"}.alignment_summary_metrics'/>
        <filename class='BamFile' onMethod='BamFileGroup.mergeAndRemoveDuplicates' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="defaultMergedBamSuffix"}'/>
        <filename class='BamFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="defaultMergedBamSuffix"}'/>
        <!-- TODO targetextract should derive from the bamfile upon which it is based.-->
        <filename class='BamFile' onMethod='extractTargetsCalculateCoverage' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="TARGET_BAM_EXTENSION",default="targetExtract.rmdup.bam"}'/>
        <filename class='BamFile' fileStage='de.dkfz.roddy.knowledge.files.FileStage.GENERIC' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${fileStageID}_${cvalue,name="pairedBamSuffix"}'/>
        <filename class='BamIndexFile' derivedFrom='BamFile' pattern='${sourcefile}.bai'/>
        <filename class='BamMetricsFile' derivedFrom='BamFile' pattern='${sourcefile}.dupmark_metrics.txt'/>
        <filename class='FlagstatsFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${flagstatsOutputDirectory}/${sourcefileAtomic}_flagstats.txt'/>
        <filename class='ChromosomeDiffPlotFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.png'/>
        <filename class='ChromosomeDiffTextFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.txt'/>
        <filename class='ChromosomeDiffValueFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.png_qcValues.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' selectiontag="groupedGenomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome_Grouped.txt'/>

        <filename class='CoverageTextFile' onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="groupedGenomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome_Grouped.txt'/>
        <filename class='CoverageTextFile' onMethod='AlignedSequenceFileGroup.pairAndSortSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='AlignedSequenceFileGroup.pairAndSortSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='AlignedSequenceFileGroup.pairAndSortSlim' selectiontag="groupedGenomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome_Grouped.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.calcReadBinsCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.calcCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.rawBamCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_RawBamFile.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.targetCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomic}.DepthOfCoverage_Target.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.extractTargetsCalculateCoverage' selectiontag="targetsWithCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_TargetsWithCov.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.extractTargetsCalculateCoverage' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_targetExtract.rmdup.bam.DepthOfCoverage_Target.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.extractTargetsCalculateCoverage' selectiontag="groupedGenomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_targetExtract.rmdup.bam.DepthOfCoverage_Target_Grouped.txt'/>
        <filename class="TextFile" derivedFrom="BamFile" selectiontag="extendedFlagstats" pattern='${outputAnalysisBaseDirectory}/${flagstatsOutputDirectory}/${sourcefileAtomic}_extendedFlagstats.txt'/>

        <filename class='OnTargetCoverageTextFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomic}_TargetsWithCov.txt'/>
        <filename class='OnTargetCoveragePlotFile' fileStage='de.dkfz.roddy.knowledge.files.FileStage.GENERIC' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${fileStageID}_targetCovDistribution.png'/>
        <filename class='InsertSizesPlotFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsize_plot.png'/>
        <filename class='InsertSizesTextFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsizes.txt'/>
        <filename class='InsertSizesValueFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsize_plot.png_qcValues.txt'/>

        <!--<filename class='TextFile' derivedFrom="BamFile" selectiontag="dipStatistics" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_HartigansDip.txt'/>-->
        <!--<filename class='InsertSizesPlotFile' derivedFrom="BamFile" selectiontag="dipStatistics" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_HartigansDip_densityPlot.png'/>-->

        <filename class='InsertSizesPlotFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsize_plot.png'/>
        <filename class='InsertSizesTextFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsizes.txt'/>
        <filename class='InsertSizesValueFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsize_plot.png_qcValues.txt'/>

        <filename class='QCSummaryFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_${sourcefileProperty,type}_wroteQcSummary.txt'/>

        <filename class='QCSummaryFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_wroteQcSummary.txt'/>

        <filename class="TextFile" derivedFrom="BamFile" selectiontag="qcJson" pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomic}_qualitycontrol.json'/>

        <!-- TODO Throw error if value overrides other value!-->
        <filename class='GenomeCoveragePlotFile' derivedFrom='CoverageTextFile[2]'
                  pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${pid}_${sample[0]}_vs_${sample[1]}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows_coveragePlot.png'/>
        <filename class='GenomeCoveragePlotFile' derivedFrom='CoverageTextFile' selectiontag="singlePlot"
                  pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${pid}_${sample}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows_coveragePlot.png'/>


    </filenames>
</configuration>
