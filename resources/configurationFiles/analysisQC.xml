<configuration name='qcAnalysis' description='Quality control for NGS data.'
               configurationType='analysis' class='de.dkfz.roddy.core.Analysis'
               workflowClass='de.dkfz.b080.co.qcworkflow.QCPipeline'
               runtimeServiceClass='de.dkfz.b080.co.common.COProjectsRuntimeService'
               imports="commonCOWorkflowsSettings"
               canCreateTestdata='true'
               listOfUsedTools="alignment,accelerated:alignment,alignAndPair,accelerated:alignAndPair,alignAndPairSlim,accelerated:alignAndPairSlim,samtoolsIndex,samtoolsFlagstat,sampesort,sampesortSlim,qcSummary,mergeAndRemoveDuplicates,mergeAndRemoveDuplicatesSlimPicard,mergeAndRemoveDuplicatesSlimBioBambam,insertSizes,genomeCoverage,fastqc,coveragePlot,coveragePlotSingle,collectBamMetrics,chromosomeDiff"
               usedToolFolders="qcPipeline,qcPipelineTools,devel,tools"
               cleanupScript="cleanupScript">
    <configurationvalues>

        <!--ENVIRONMENT SETUP -->
        <cvalue name="HTSLIB_VERSION" value="0.2.5" type="string"/>
        <cvalue name="PERL_VERSION" value="5.20.2" type="string"/>
        <cvalue name="PYTHON_VERSION" value="2.7.9" type="string"/>
        <cvalue name="R_VERSION" value="3.4.0" type="string"/>
        <cvalue name='BEDTOOLS_VERSION' value='2.16.2' type='string'/>
        <cvalue name="VCFTOOLS_VERSION" value="0.1.10" type="string"/>
        <cvalue name="SAMTOOLS_VERSION" value="0.1.19" type="string"/>
        <cvalue name="SAMBAMBA_VERSION" value="0.5.9" type="string"
                description="Only used for 'view' and 'sort'."/>
        <cvalue name="SAMBAMBA_FLAGSTATS_VERSION" value="0.4.6" type="string"
                description="Version 0.4.6 of sambamba produces the old samtools 0.1.19 compatible counts."/>
        <cvalue name="MBUFFER_VERSION" value="20160613" type="string"
                description="Newer mbuffer versions (e.g. 2019) additionally require to set the -s parameter to avoid sudden mbuffer termination for small buffer-sizes (e.g. 100M). This is not implemented in this workflow version."/>
        <cvalue name="SAMBAMBA_MARKDUP_VERSION" value="0.5.9" type="string"
                description="Only used for duplication marking."/>
        <cvalue name="PICARD_VERSION" value="1.125" type="string"/>
        <cvalue name="LIBMAUS_VERSION" value="0.0.131" type="string"/>
        <cvalue name="BIOBAMBAM_VERSION" value="0.0.148" type="string"/>
        <cvalue name="JAVA_VERSION" value="1.8.0_131" type="string"/>
        <cvalue name="BWA_VERSION" value="0.7.8" type="string"
                description="Use e.g. 0.7.8-r2.05 for a specific revision of bb-bwa. Node that bwa-mem2 uses much more memory."/>
        <cvalue name="BWA_MODULE" value="" type="string"
                description="Empty string will result in automatic inference of the module name. If the first number (major version) is '2' then BWA_MODULE is automatically set to 'bwa-mem2', otherwise 'bwa'. See tbi-lsf-cluster.sh. You can also explicitly set the version."/>
        <cvalue name="BWA_MEM_OPTIONS" value='" -T 0 "' type="string"
                description="The original CO configuration is ' -T 0 '. Note that  the value must be quoted."/>
        <cvalue name="FASTQC_VERSION" value="0.11.3" type="string"/>

        <cvalue name="workflowEnvironmentScript" value="workflowEnvironment_tbiLsf" type="string"/>

        <!-- Directories -->
        <cvalue name='sampleDirectory' value='${inputBaseDirectory}/${pid}/${sample}/${SEQUENCER_PROTOCOL}' type='path'/>
        <cvalue name='sequenceDirectory' value='${sampleDirectory}/${run}/sequence' type='path'/>

        <cvalue name='analysisMethodNameOnInput' value='whole_genome_analysis' type='string'/>
        <cvalue name='analysisMethodNameOnOutput' value='genome' type='string'/>

        <cvalue name='refDataBaseDirectory' value="/icgc/ngs_share" type="path"/>

        <!-- Configuration options -->
        <cvalue name="runSlimWorkflow" value="true" type="boolean"
                description="Keep this to 'true'. Non-slim scripts are unmaintained."/>
        <cvalue name="useCombinedAlignAndSampe" value="false" type="boolean"
                description="Keep this to 'false'. Non-combined BWA scripts are unmaintained."/>
        <cvalue name='useRoddyScratchAsBigFileScratch' value='false' type='boolean'
                description="If false, all temp-files are written to the place implemented in the scripts (usually close to the result file). Otherwise they go to the node-local temporary directory (e.g. $PBS_SCRATCH_DIR/$PBS_JOBID)."/>

        <cvalue name='runFastQC' value='true' type='boolean'/>
        <cvalue name='runCoveragePlots' value='true' type='boolean'/>
        <cvalue name="runBwaPostAltJs" value="false" type="boolean"
                description="Whether to run bwa-postalt.js script from bwa.kit. Required for ALT-contig handling. See also K8_VERSION and ALT_FILE. You need to use a recent BWA version (>=0.7.11)"/>
        <cvalue name="bwaPostAltJsHla" value="false" type="boolean"
                description="Set to 'true' to let the `bwa-postalt.js` script create FASTQ files with reads mapping to HLA contigs. This imposes additional requirements on your reference assembly (e.g. HLA contigs are matched by ID in the FASTA)."/>
        <cvalue name="bwaPostAltJsMinPaRatio" value="" type="string"
                description="The min PA ratio (float) used for the `-r` option of the bwa-postalt.js script. Default: empty = use script's default"/>
        <cvalue name="bwaPostAltJsPath" value="" type="string"
                description="Path to the bwa-postalt.js script from bwa.kit."/>

        <cvalue name='fingerprintsOutputDirectory' value="fingerprinting" type="string"/>
        <cvalue name='runFingerprinting' value='false' type='boolean'
                description='Fingerprint the individuals using a set of reference positions.'/>
        <cvalue name="fingerprintingSitesFile_hs37"
                value="${refDataBaseDirectory}/assemblies/hg19_GRCh37_1000genomes/databases/fingerprinting/hovestadt_v1.1/snp138Common.n1000.vh20140318.bed" type="path"/>
        <cvalue name="fingerprintingSitesFile" value="${fingerprintingSitesFile_hs37}" type="path"
                description='BED file with the reference positions used for fingerprinting. Used for to discover sample swaps'/>

        <cvalue name="INSERT_SIZE_LIMIT" value="1000" type="integer" description="Make the value a lot larger for mate pair data."/>
        <cvalue name="BWA_MEM_THREADS" value="8" type="integer" description="Threads for bwa mem."/>

        <cvalue name='markDuplicatesVariant' value='' type="string"
                description="Allowed values: biobambam, picard, sambamba. Default: empty. If set, this option takes precedence over the older useBioBamBamMarkDuplicates option."/>

        <cvalue name='SAMBAMBA_MARKDUP_OPTS' value='"-t 1 -l 0 --hash-table-size=2000000 --overflow-list-size=1000000 --io-buffer-size=64"'
                description="Please use -l 0, the workflow unpacks the BAM directly with samtools. Compression is faster and more stable with samtools."/>

        <cvalue name='PICARD_MARKDUP_JVM_OPTS' value="-Xms64G -Xmx64G"
                description="Keep the -Xmx JVM option and the resources requested for the picard job in sync. Picard should use less than the reserved total memory of the job, because also mbuffer etc. need some memory."/>

        <cvalue name="CONVEY_SAMBAMBA_SAMSORT_THREADS" value="8" type="integer"
                description="Number of threads for sorting the SAM output when running on Convey."/>
        <cvalue name="CONVEY_SAMBAMBA_SAMSORT_MEMSIZE" value="96G" type="string"
                description="Estimated memory for sorting SAM output on Convey. Conveys have 128 GB. Safety margin for sambamba GC is included."/>

        <!-- Reference Files -->
        <cvalue name="CHROM_SIZES_FILE" value=""
                description="Number of A, T, C, G, but not N, R, Y, etc. per chromosome. 2-column TSV format with chromosome ID and count."/>
        <cvalue name="INDEX_PREFIX" value=""
                description="Path to the genome FASTA file. The same directory should contain the BWA index using the FASTA file, including the FASTA suffix (whatever that may be)."/>
        <cvalue name="ALT_FILE" value="${INDEX_PREFIX}.alt" type="path"
                description="Path to .alt file, e.g. like the one in bwa.kit"/>

        <cvalue name="MBUFFER_SIZE_LARGE" value="2g" type="string"/>
        <cvalue name="MBUFFER_SIZE_SMALL" value="100m" type="string"/>

        <cvalue name='pairedBamSuffix' value='paired.bam.sorted.bam' type='string'/>

    </configurationvalues>
    <!--<testdataoptions>-->
        <!--&lt;!&ndash; id is the name of the test data option set-->
             <!--Size has either a relative or absolute ratio, with absolute being the default-->
             <!--If path is not set testdataOutputBaseDirectory is used &ndash;&gt;-->
        <!--<testdataoption id="small" size="10000" ratio="absolute" testDataPath="${testDataDirectory}" outputPath="${testDataOutputBaseDirectory}"/>-->
        <!--<testdataoption id="large" size="100000" ratio="absolute"/>-->
    <!--</testdataoptions>-->

    <processingTools>
        <tool name="workflowEnvironment_tbiLsf" value="tbi-lsf-cluster.sh" basepath="qcPipeline/environments"/>
        <tool name="bashLib" value="bashLib.sh" basepath="qcPipeline"/>
        <tool name="workflowLib" value="workflowLib.sh" basepath="qcPipeline"/>
        <tool name="cleanupScript" value="cleanupScript.sh" basepath="qcPipeline" >
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="0.1" cores="1" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="0.1" cores="1" nodes="1" walltime="1"/>
            </resourcesets>
        </tool>
        <tool name="fastqcClassify" value="fastqcClassify" basepath="qcPipeline"/>
        <tool name='fastqc' value='checkFastQC.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="1" cores="1" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="1" cores="1" nodes="1" walltime="10:00:00"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter='RAW_SEQ'/>
            <output type="tuple">
                <output type="file" typeof="de.dkfz.b080.co.files.FastqcFile" scriptparameter="FILENAME_FASTQC"/>
                <output type="file" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_FASTQ_QC_STATUS"/>
            </output>
        </tool>
        <tool name='adaptorTrimming' value='trimmomatic/trimmomatic-0.30.jar' basepath="qcPipelineTools"/>
        <tool name='alignment' value='bwaAlignSequence.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="4" cores="8" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="4" cores="8" nodes="1" walltime="10"/>
                <rset size="xl" memory="8" cores="8" nodes="1" walltime="10"/>
            </resourcesets>
        </tool>
        <tool name='accelerated:alignment' value='bwaAlignSequence.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="24" cores="12" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="m" memory="24" cores="12" nodes="1" walltime="1" queue="convey"/>
                <rset size="l" memory="24" cores="12" nodes="1" walltime="2" queue="convey"/>
                <rset size="xl" memory="36" cores="12" nodes="1" walltime="5" queue="convey"/>
            </resourcesets>
        </tool>
        <tool name='sampesort' value='bwaSampeSort.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="25" cores="6" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="s" memory="38" cores="6" nodes="1" walltime="2"/>
                <rset size="m" memory="42" cores="6" nodes="1" walltime="4"/>
                <rset size="l" memory="52" cores="6" nodes="1" walltime="10"/>
                <rset size="xl" memory="75" cores="6" nodes="1" walltime="12"/>
            </resourcesets>
        </tool>
        <tool name='sampesortSlim' value='bwaSampeSortSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="25" cores="6" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="s" memory="25" cores="6" nodes="1" walltime="1"/>
                <rset size="m" memory="30" cores="6" nodes="1" walltime="2"/>
                <rset size="l" memory="35" cores="8" nodes="1" walltime="7"/>
                <rset size="xl" memory="35" cores="6" nodes="1" walltime="12"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.AlignedSequenceFile" scriptparameter="FILENAME_SEQ_1" />
            <input type="file" typeof="de.dkfz.b080.co.files.AlignedSequenceFile" scriptparameter="FILENAME_SEQ_2" />
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_1" />
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_2" />
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <input type="string" setby="callingCode" scriptparameter="RUN"/>
            <input type="string" setby="callingCode" scriptparameter="LANE"/>
            <input type="string" setby="callingCode" scriptparameter="LB"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_1_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_2_INDEX"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_SORTED_BAM">
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS" />
                <output type="file" variable="extendedFlagstatsFile" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS" />
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS" />
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX" />
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT" />
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS" />
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX" />
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT" />
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE" />
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE" />
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY" />
            </output>
        </tool>
        <tool name='alignAndPair' value='bwaMemSort.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="12" cores="8" nodes="1" walltime="00:10:00" queue="convey_fast"/>
                <!-- Production -->
                <rset size="s" memory="12" cores="8" nodes="1" walltime="2"/>
                <rset size="m" memory="17" cores="8" nodes="1" walltime="6"/>
                <rset size="l" memory="18" cores="8" nodes="1" walltime="35"/>
                <rset size="xl" memory="20" cores="8" nodes="1" walltime="50"/>
            </resourcesets>
        </tool>
        <tool name='accelerated:alignAndPair' value='bwaMemSort.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="20" cores="12" nodes="1" queue="convey_fast"/>
                <!-- Production -->
                <rset size="xs" memory="20" cores="12" nodes="1" walltime="1" queue="convey"/>
                <rset size="s" memory="20" cores="12" nodes="1" walltime="1" queue="convey"/>
                <rset size="m" memory="20" cores="12" nodes="1" walltime="5" queue="convey"/>
                <rset size="l" memory="26" cores="12" nodes="1" walltime="15" queue="convey"/>
                <rset size="xl" memory="26" cores="12" nodes="1" walltime="30" queue="convey"/>
            </resourcesets>
        </tool>
        <tool name='alignAndPairSlim' value='bwaMemSortSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="12" cores="8" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- ChIP-Seq -->
                <rset size="s" memory="12" cores="8" nodes="1" walltime="2"/>
                <!-- exome part lane -->
                <rset size="m" memory="17" cores="8" nodes="1" walltime="6"/>
                <!-- HiSeq full lane. 24 h would be OK but as soon as there are I/O problems on the node, not even 36 h are sufficient - biobambam sort might also be slower than samtools, it seems to use fewer sorting threads	 -->
                <rset size="l" memory="20" cores="8" nodes="1" walltime="60"/>
                <!-- X10 lane -->
                <rset size="xl" memory="20" cores="8" nodes="1" walltime="160"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_1"/>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_2"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <input type="string" setby="callingCode" scriptparameter="RUN"/>
            <input type="string" setby="callingCode" scriptparameter="LANE"/>
            <input type="string" setby="callingCode" scriptparameter="LB"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_1_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_2_INDEX"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_SORTED_BAM">
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="fingerprintsFile" fnpatternselectiontag="fingerprints" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_FINGERPRINTS" check="false"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON" />
            </output>
        </tool>
        <tool name='accelerated:alignAndPairSlim' value='bwaMemSortSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="126" cores="12" nodes="1" walltime="00:10:00" queue="convey_fast"/>
                <!-- Production -->
                <rset size="s" memory="126" cores="12" nodes="1" walltime="1" queue="convey"/>
                <rset size="m" memory="126" cores="12" nodes="1" walltime="5" queue="convey"/>
                <rset size="l" memory="126" cores="12" nodes="1" walltime="15" queue="convey"/>
                <rset size="xl" memory="126" cores="12" nodes="1" walltime="30" queue="convey"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_1"/>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_2"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <input type="string" setby="callingCode" scriptparameter="RUN"/>
            <input type="string" setby="callingCode" scriptparameter="LANE"/>
            <input type="string" setby="callingCode" scriptparameter="LB"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_1_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_2_INDEX"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_SORTED_BAM">
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="fingerprintsFile" fnpatternselectiontag="fingerprints" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_FINGERPRINTS" check="false"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON" />
            </output>
        </tool>

        <tool name='commonAlignmentSettingsScript' value='bwaCommonAlignmentSettings.sh' basepath='qcPipeline'/>

        <tool name='bwaErrorCheckingScript' value='bwaErrorChecking.sh' basepath='qcPipeline'/>
        <tool name='insilicoGenotyperScript' value='insilicoGenotyper.py' basepath='qcPipeline'/>
        <tool name='pairedEndReadAberrationsScript' value='pairedEndReadAberrations.py' basepath='qcPipeline'/>
        <tool name='coveragePlotScript' value='coveragePlot.R' basepath='qcPipeline'/>
        <tool name='insertSizesBucketSortScript' value='isizes_bucketsort.pl' basepath='qcPipeline'/>
        <tool name='insertSizePlotScript' value='insertsizePlot.R' basepath='qcPipeline'/>
        <!--<tool name='writeQcSummary' value='writeQCSummary.py' basepath='qcPipeline'/>-->
        <tool name='writeQcSummary' value='writeQCsummary.pl' basepath='qcPipeline'/>
        <tool name='qcJson' value='qcJson.pl' basepath='qcPipeline'/>

        <tool name='samtoolsIndex' value='samtoolsIndexBamfile.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="1" cores="1" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="1" cores="1" nodes="1" walltime="5"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter='FILENAME'/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="IDX_FILE"/>
        </tool>
        <tool name='collectBamMetrics' value='picardCollectMetrics.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="1" cores="1" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="3" cores="1" nodes="1" walltime="5"/>
            </resourcesets>
        </tool>
        <tool name='samtoolsFlagstat' value='samtoolsFlagstatBamfile.sh' basepath='qcPipeline'>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter='FILENAME' />
                <!--<constraint method="hasIndex" methodonfail="index"/>-->
            <!--</input>-->
            <output type="file" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter='FILENAME_FLAGSTAT'/>
        </tool>
        <tool name='sequencerDetection' value='PhredOrIllumina.pl' basepath='qcPipeline'/>
	<tool name='convertIlluminaScores' value='Illumina2PhredScore.pl' basepath='qcPipeline'/>
        <tool name='insertSizes' value='insertSizeDistribution.sh' basepath='qcPipeline'>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME"/>
            <output type="filegroup" typeof="de.dkfz.b080.co.files.InsertSizesFileGroup">
                <output type="file" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAMED"/>
                <output type="file" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAMEP"/>
                <output type="file" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAMEV"/>
            </output>
        </tool>
        <tool name='chromosomeDiff' value='differentiateChromosomes.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="1" cores="1" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="s" memory="1" cores="1" nodes="1" walltime="1"/>
                <rset size="l" memory="25" cores="1" nodes="1" walltime="5"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME"/>
            <output type="filegroup" typeof="de.dkfz.b080.co.files.ChromosomeDiffFileGroup">
                <output type="file" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAMED"/>
                <output type="file" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAMEP"/>
                <output type="file" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAMEV"/>
            </output>
        </tool>
        <tool name='genomeCoverage' value='genomeCoverage.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="0.05" cores="1" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="s" memory="0.05" cores="4" nodes="1" walltime="1"/>
                <rset size="l" memory="0.05" cores="4" nodes="1" walltime="6"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME"/>
            <input type="file" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="FILENAME_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="COVERAGE_TYPE"/>
            <output type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_COVERAGE"/>
        </tool>
        <tool name='plotDiffchrom' value='chrom_diff.r' basepath='qcPipeline'/>
        <tool name='coverageQc' value='coverageQc.py' basepath='qcPipeline'/>
        <tool name='filterReadBins' value='filter_readbins.pl' basepath='qcPipeline'/>
        <tool name='genomeCoveragePyScript' value='genomeCoverage.py' basepath='qcPipeline'/>
        <tool name='coverageQcDImpl' value='coverageQcD/coverageQc' basepath="qcPipelineTools"/>
        <tool name='genomeCoverageDImpl' value='genomeCoverage/genomeCoverage' basepath="qcPipelineTools"/>

        <tool name='readBinsCoverage' value='genomeCoverageReadBins.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="0.05" cores="1" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="0.05" cores="4" nodes="1" walltime="6"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME"/>
            <output type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="OUTFILENAME"/>
        </tool>
        <tool name='coveragePlot' value='genomeCoveragePlots.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="0.05" cores="4" nodes="1" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="0.05" cores="4" nodes="1" walltime="6"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_CONTROL"/>
            <input type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_TUMOR"/>
            <output type="file" typeof="de.dkfz.b080.co.files.GenomeCoveragePlotFile" scriptparameter="PLOTFILE"/>
        </tool>
        <tool name='coveragePlotSingle' value='genomeCoveragePlots.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="0.05" cores="4" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="l" memory="0.05" cores="4" nodes="1" walltime="6"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_CONTROL"/>
            <output type="file" fnpatternselectiontag="singlePlot" typeof="de.dkfz.b080.co.files.GenomeCoveragePlotFile" scriptparameter="PLOTFILE"/>
        </tool>
        <tool name='qcSummary' value='writeQCSummary.sh' basepath='qcPipeline'/>
        <tool name='mergeAndRemoveDuplicates' value='mergeAndRemoveDuplicates.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="73" cores="8" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="xs" memory="73" cores="8" nodes="1" walltime="1"/>
                <rset size="s" memory="73" cores="8" nodes="1" walltime="5"/>
                <rset size="m" memory="73" cores="8" nodes="1" walltime="20"/>
                <rset size="l" memory="73" cores="8" nodes="1" walltime="40"/>
                <rset size="xl" memory="73" cores="8" nodes="1" walltime="80"/>
            </resourcesets>
        </tool>
        <tool name='fingerprint' value="bsnp.py" basepath="qcPipeline"/>
        <tool name='mergeAndRemoveDuplicatesSlimPicard' value='mergeAndMarkOrRemoveDuplicatesSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="50" cores="8" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="xs" memory="50" cores="8" nodes="1" walltime="1"/>
                <rset size="s" memory="55" cores="8" nodes="1" walltime="2"/>
                <rset size="m" memory="62" cores="8" nodes="1" walltime="5"/>
                <rset size="l" memory="60" cores="8" nodes="1" walltime="15"/>
                <rset size="xl" memory="100" cores="8" nodes="1" walltime="240"/>
            </resourcesets>
            <!-- The first input object will be obsolete at some point, currently, filegroups cannot be the first object. -->
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="IGNORED_FILENAME"/>
            <input type="filegroup" typeof="de.dkfz.b080.co.files.BamFileGroup" scriptparameter="INPUT_FILES" passas="array"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME">
                <output type="file" variable="indexFile" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="FILENAME_INDEX"/>
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="metricsFile" typeof="de.dkfz.b080.co.files.BamMetricsFile" scriptparameter="FILENAME_METRICS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="fingerprintsFile" fnpatternselectiontag="fingerprints" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_FINGERPRINTS" check="false"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON"/>
            </output>
        </tool>
        <tool name='mergeAndRemoveDuplicatesSlimBioBambam' value='mergeAndMarkOrRemoveDuplicatesSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="5" cores="3" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="xs" memory="5" cores="3" nodes="1" walltime="1"/>
                <rset size="s" memory="5" cores="3" nodes="1" walltime="2"/>
                <rset size="m" memory="5" cores="3" nodes="1" walltime="12"/>
                <rset size="l" memory="15" cores="3" nodes="1" walltime="120"/>
                <rset size="xl" memory="15" cores="3" nodes="1" walltime="240"/>
            </resourcesets>
            <!-- The first input object will be obsolete at some point, currently, filegroups cannot be the first object. -->
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="IGNORED_FILENAME"/>
            <input type="filegroup" typeof="de.dkfz.b080.co.files.BamFileGroup" scriptparameter="INPUT_FILES" passas="array"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME">
                <output type="file" variable="indexFile" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="FILENAME_INDEX"/>
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="metricsFile" typeof="de.dkfz.b080.co.files.BamMetricsFile" scriptparameter="FILENAME_METRICS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="fingerprintsFile" fnpatternselectiontag="fingerprints" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_FINGERPRINTS" check="false"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON"/>
            </output>
        </tool>
        <tool name='mergeAndRemoveDuplicatesSlimSambamba' value='mergeAndMarkOrRemoveDuplicatesSlim.sh' basepath='qcPipeline'>
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="30" cores="6" nodes="1" walltime="00:10:00" queue="devel"/>
                <!-- Production -->
                <rset size="xs" memory="3" cores="6" nodes="1" walltime="1"/>
                <rset size="s" memory="4" cores="6" nodes="1" walltime="15"/>
                <rset size="m" memory="5" cores="6" nodes="1" walltime="20"/>
                <rset size="l" memory="6" cores="6" nodes="1" walltime="30"/>
                <rset size="xl" memory="8" cores="6" nodes="1" walltime="80"/>
            </resourcesets>
            <!-- The first input object will be obsolete at some point, currently, filegroups cannot be the first object. -->
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="IGNORED_FILENAME"/>
            <input type="filegroup" typeof="de.dkfz.b080.co.files.BamFileGroup" scriptparameter="INPUT_FILES" passas="array"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME">
                <output type="file" variable="indexFile" typeof="de.dkfz.b080.co.files.BamIndexFile" scriptparameter="FILENAME_INDEX"/>
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="metricsFile" typeof="de.dkfz.b080.co.files.BamMetricsFile" scriptparameter="FILENAME_METRICS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="fingerprintsFile" fnpatternselectiontag="fingerprints" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_FINGERPRINTS" check="false"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON"/>
            </output>
        </tool>

        <!-- not sure if that belongs here ... needed for sambamba markdup, which is no own tool -->
	    <tool name='fakeDupmarkMetrics' value='fakeDupmarkMetrics.pl' basepath='qcPipeline'/>

        <tool name="checkAlreadyMergedLanes" value="alreadyMergedLanes.pl" basepath="qcPipeline"/>
        <tool name='combinedBamAnalysis' value='flags_isizes_PEaberrations.pl' basepath='qcPipeline'/>

    </processingTools>
    <filenames package='de.dkfz.b080.co.files' filestagesbase='de.dkfz.b080.co.files.COFileStage'>
        <!-- Filenames are always stored in the pid's output folder -->
        <!-- Different variables can be used:
            - ${sourcefile}, use the name and the path of the file from which the new name is derived
            - ${sourcefileAtomic}, use the atomic name of which the file is derived
            - ${sourcefileAtomicPrefix,delimiter=".."}, use the atomic name's prefix (without file-ending like .txt/.paired.bam...
                                                        of which the file is derived, set the delimiter option to define the delimiter default is "_"
                                                        the delimiter has to be placed inside "" as this is used to find the delimiter!
            - ${sourcepath}, use the path in which the source file is stored
            - ${outputbasepath}, use the output path of the pid
            - ${[nameofdir]OutputDirectory}

            NOTICE: If you use options for a variable your are NOT allowed to use ","! It is used to recognize options.

            - ${pid}
            - ${sample}
            - ${run}
            - ${lane}
            - ${laneindex}
            - You can put in configuration values to do this use:
              ${cvalue,name=[name of the value],default=".."} where default is optional.
            - ${fileStageID} use the id String of the file's stage to build up the name.
            -->
        <!-- A filename can be derived from another file, use derivedFrom='shortClassName/longClassName'
             A filename can also be specified for a level, use fileStage='PID/SAMPLE/RUN/LANE/INDEXEDLANE', refer to BaseFile.FileStage
             A filename can be specified for all levels, the name is then build up with the ${fileStageID} value
             A filename can be created using the file's called method's name
             A filename can be created using the used tool's name
             -->

        <filename class='AlignedSequenceFile' fileStage="INDEXEDLANE" pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${dataSet}_${sample}_${run}_${laneindex}_sequence.sai'/>
        <filename class='FastqcFile' onMethod="LaneFile.calcFastqc" pattern="${outputAnalysisBaseDirectory}/${fastx_qcOutputDirectory}/${dataSet}_${sample}_${run}_${lane}_${laneindex}_sequence_fastqc.zip"/>
        <filename class='TextFile'   onMethod="LaneFile.calcFastqc" pattern="${outputAnalysisBaseDirectory}/${fastx_qcOutputDirectory}/${dataSet}_${sample}_${run}_${lane}_${laneindex}_sequence_fastq_qcpass_status.txt"/>
        <filename class='BamMetricsAlignmentSummaryFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${metricsOutputDirectory}/${cvalue,name="COLLECT_METRICS_PREFIX"}.alignment_summary_metrics'/>
        <filename class='BamFile' onMethod='BamFileGroup.mergeAndRemoveDuplicates' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="defaultMergedBamSuffix"}'/>
        <filename class='BamFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="defaultMergedBamSuffix"}'/>
        <!-- TODO targetextract should derive from the bamfile upon which it is based.-->
        <filename class='BamFile' onMethod='extractTargetsCalculateCoverage' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="TARGET_BAM_EXTENSION",default="targetExtract.rmdup.bam"}'/>
        <filename class='BamFile' onMethod='LaneFileGroup.alignAndPairSlim' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${run}_${lane}_${cvalue,name="pairedBamSuffix"}'/>
        <filename class='BamIndexFile' derivedFrom='BamFile' pattern='${sourcefile}.bai'/>
        <filename class='BamMetricsFile' derivedFrom='BamFile' pattern='${sourcefile}.dupmark_metrics.txt'/>
        <filename class='FlagstatsFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${flagstatsOutputDirectory}/${sourcefileAtomic}_flagstats.txt'/>
        <filename class='ChromosomeDiffPlotFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.png'/>
        <filename class='ChromosomeDiffTextFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.txt'/>
        <filename class='ChromosomeDiffValueFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.png_qcValues.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='AlignedSequenceFileGroup.pairAndSortSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='AlignedSequenceFileGroup.pairAndSortSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.calcReadBinsCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.calcCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.rawBamCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_RawBamFile.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.targetCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomic}.DepthOfCoverage_Target.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.extractTargetsCalculateCoverage' selectiontag="targetsWithCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_TargetsWithCov.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.extractTargetsCalculateCoverage' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_targetExtract.rmdup.bam.DepthOfCoverage_Target.txt'/>
        <filename class="TextFile" derivedFrom="BamFile" selectiontag="extendedFlagstats" pattern='${outputAnalysisBaseDirectory}/${flagstatsOutputDirectory}/${sourcefileAtomic}_extendedFlagstats.txt'/>

        <filename class='OnTargetCoverageTextFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomic}_TargetsWithCov.txt'/>
        <filename class='OnTargetCoveragePlotFile' fileStage='de.dkfz.roddy.knowledge.files.FileStage.GENERIC' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_targetCovDistribution.png'/>
        <filename class='InsertSizesPlotFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsize_plot.png'/>
        <filename class='InsertSizesTextFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsizes.txt'/>
        <filename class='InsertSizesValueFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsize_plot.png_qcValues.txt'/>

        <filename class='InsertSizesPlotFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsize_plot.png'/>
        <filename class='InsertSizesTextFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsizes.txt'/>
        <filename class='InsertSizesValueFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsize_plot.png_qcValues.txt'/>

        <filename class='QCSummaryFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_${sourcefileProperty,type}_wroteQcSummary.txt'/>

        <filename class='QCSummaryFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_wroteQcSummary.txt'/>

        <filename class="TextFile" onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="fingerprints" pattern='${outputAnalysisBaseDirectory}/${fingerprintsOutputDirectory}/${sourcefileAtomic}.fp'/>
        <filename class="TextFile" onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' selectiontag="fingerprints" pattern='${outputAnalysisBaseDirectory}/${fingerprintsOutputDirectory}/${sourcefileAtomic}.fp'/>
        <filename class="TextFile" derivedFrom="BamFile" selectiontag="qcJson" pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomic}_qualitycontrol.json'/>

        <!-- TODO Throw error if value overrides other value!-->
        <filename class='GenomeCoveragePlotFile' derivedFrom='CoverageTextFile[2]'
                  pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${pid}_${sample[0]}_vs_${sample[1]}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows_coveragePlot.png'/>
        <filename class='GenomeCoveragePlotFile' derivedFrom='CoverageTextFile' selectiontag="singlePlot"
                  pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${pid}_${sample}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows_coveragePlot.png'/>

    </filenames>
</configuration>
